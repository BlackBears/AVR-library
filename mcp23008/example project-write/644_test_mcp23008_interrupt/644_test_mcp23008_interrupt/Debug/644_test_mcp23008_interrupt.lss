
644_test_mcp23008_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000050  00800100  00800100  0000075c  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000060  00000000  00000000  00000ead  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000022e  00000000  00000000  00000f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000090b  00000000  00000000  0000113b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000040c  00000000  00000000  00001a46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000093c  00000000  00000000  00001e52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00002790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049d  00000000  00000000  00002930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000046a  00000000  00000000  00002dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 000000b4  00000000  00000000  00003237  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 35       	cpi	r26, 0x50	; 80
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

volatile MCP23008 gpio;
u08 data[2];

int main(void)
{
  90:	1f 93       	push	r17
	mcp23008_init(&gpio,0b000);
  92:	8c e4       	ldi	r24, 0x4C	; 76
  94:	91 e0       	ldi	r25, 0x01	; 1
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <mcp23008_init>
	//data[0] = 0x00;
	//data[1] = 0x00;
	//i2cMasterSendNI(0x40,2,&data);
	mcp23008_write_register(&gpio, MCP23008_IODIR, 0b00000000);	//	all output
  9c:	8c e4       	ldi	r24, 0x4C	; 76
  9e:	91 e0       	ldi	r25, 0x01	; 1
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	0e 94 09 03 	call	0x612	; 0x612 <mcp23008_write_register>
	
	DDRD = 0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a b9       	out	0x0a, r24	; 10
	
	data[0] = 0x09;
  ac:	89 e0       	ldi	r24, 0x09	; 9
  ae:	80 93 4a 01 	sts	0x014A, r24
	for( u08 i = 0; i < 0x100; i++ )
  b2:	10 e0       	ldi	r17, 0x00	; 0
	{
		PORTD = i;
  b4:	1b b9       	out	0x0b, r17	; 11
		data[1] = i;
  b6:	10 93 4b 01 	sts	0x014B, r17
		//i2cMasterSendNI(gpio.address,2,&data);
		mcp23008_write_register(&gpio,MCP23008_GPIO,i);
  ba:	8c e4       	ldi	r24, 0x4C	; 76
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	69 e0       	ldi	r22, 0x09	; 9
  c0:	41 2f       	mov	r20, r17
  c2:	0e 94 09 03 	call	0x612	; 0x612 <mcp23008_write_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	83 ed       	ldi	r24, 0xD3	; 211
  c8:	90 e3       	ldi	r25, 0x30	; 48
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x3a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x40>
  d0:	00 00       	nop
	mcp23008_write_register(&gpio, MCP23008_IODIR, 0b00000000);	//	all output
	
	DDRD = 0xFF;
	
	data[0] = 0x09;
	for( u08 i = 0; i < 0x100; i++ )
  d2:	1f 5f       	subi	r17, 0xFF	; 255
  d4:	ef cf       	rjmp	.-34     	; 0xb4 <main+0x24>

000000d6 <i2cSetBitrate>:
	// SCL freq = F_CPU/(16+2*TWBR))
	#ifdef TWPS0
		// for processors with additional bitrate division (mega128)
		// SCL freq = F_CPU/(16+2*TWBR*4^TWPS)
		// set TWPS to zero
		cbi(TWSR, TWPS0);
  d6:	20 91 b9 00 	lds	r18, 0x00B9
  da:	2e 7f       	andi	r18, 0xFE	; 254
  dc:	20 93 b9 00 	sts	0x00B9, r18
		cbi(TWSR, TWPS1);
  e0:	20 91 b9 00 	lds	r18, 0x00B9
  e4:	2d 7f       	andi	r18, 0xFD	; 253
  e6:	20 93 b9 00 	sts	0x00B9, r18
	#endif
	// calculate bitrate division	
	bitrate_div = ((F_CPU/1000l)/bitrateKHz);
  ea:	9c 01       	movw	r18, r24
  ec:	40 e0       	ldi	r20, 0x00	; 0
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	68 ee       	ldi	r22, 0xE8	; 232
  f2:	73 e0       	ldi	r23, 0x03	; 3
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 35 03 	call	0x66a	; 0x66a <__divmodsi4>
	if(bitrate_div >= 16)
  fc:	20 31       	cpi	r18, 0x10	; 16
  fe:	28 f0       	brcs	.+10     	; 0x10a <i2cSetBitrate+0x34>
		bitrate_div = (bitrate_div-16)/2;
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	20 51       	subi	r18, 0x10	; 16
 104:	30 40       	sbci	r19, 0x00	; 0
 106:	35 95       	asr	r19
 108:	27 95       	ror	r18
	outb(TWBR, bitrate_div);
 10a:	20 93 b8 00 	sts	0x00B8, r18
}
 10e:	08 95       	ret

00000110 <i2cInit>:
// functions
void i2cInit(void)
{
	// set pull-up resistors on I2C bus pins
	// TODO: should #ifdef these
	sbi(PORTC, 0);	// i2c SCL on ATmega163,323,16,32,etc
 110:	40 9a       	sbi	0x08, 0	; 8
	sbi(PORTC, 1);	// i2c SDA on ATmega163,323,16,32,etc
 112:	41 9a       	sbi	0x08, 1	; 8
	sbi(PORTD, 0);	// i2c SCL on ATmega128,64
 114:	58 9a       	sbi	0x0b, 0	; 11
	sbi(PORTD, 1);	// i2c SDA on ATmega128,64
 116:	59 9a       	sbi	0x0b, 1	; 11

	// clear SlaveReceive and SlaveTransmit handler to null
	i2cSlaveReceive = 0;
 118:	10 92 47 01 	sts	0x0147, r1
 11c:	10 92 46 01 	sts	0x0146, r1
	i2cSlaveTransmit = 0;
 120:	10 92 49 01 	sts	0x0149, r1
 124:	10 92 48 01 	sts	0x0148, r1
	// set i2c bit rate to 100KHz
	i2cSetBitrate(100);
 128:	84 e6       	ldi	r24, 0x64	; 100
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2cSetBitrate>
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);
 130:	ec eb       	ldi	r30, 0xBC	; 188
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	84 60       	ori	r24, 0x04	; 4
 138:	80 83       	st	Z, r24
	// set state
	I2cState = I2C_IDLE;
 13a:	10 92 00 01 	sts	0x0100, r1
	// enable TWI interrupt and slave address ACK
	sbi(TWCR, TWIE);
 13e:	80 81       	ld	r24, Z
 140:	81 60       	ori	r24, 0x01	; 1
 142:	80 83       	st	Z, r24
	sbi(TWCR, TWEA);
 144:	80 81       	ld	r24, Z
 146:	80 64       	ori	r24, 0x40	; 64
 148:	80 83       	st	Z, r24
	//outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	// enable interrupts
	sei();
 14a:	78 94       	sei
}
 14c:	08 95       	ret

0000014e <i2cSetLocalDeviceAddr>:
}

void i2cSetLocalDeviceAddr(u08 deviceAddr, u08 genCallEn)
{
	// set local device address (used in slave mode only)
	outb(TWAR, ((deviceAddr&0xFE) | (genCallEn?1:0)) );
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	66 23       	and	r22, r22
 152:	09 f4       	brne	.+2      	; 0x156 <i2cSetLocalDeviceAddr+0x8>
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	8e 7f       	andi	r24, 0xFE	; 254
 158:	89 2b       	or	r24, r25
 15a:	80 93 ba 00 	sts	0x00BA, r24
}
 15e:	08 95       	ret

00000160 <i2cSetSlaveReceiveHandler>:

void i2cSetSlaveReceiveHandler(void (*i2cSlaveRx_func)(u08 receiveDataLength, u08* recieveData))
{
	i2cSlaveReceive = i2cSlaveRx_func;
 160:	90 93 47 01 	sts	0x0147, r25
 164:	80 93 46 01 	sts	0x0146, r24
}
 168:	08 95       	ret

0000016a <i2cSetSlaveTransmitHandler>:

void i2cSetSlaveTransmitHandler(u08 (*i2cSlaveTx_func)(u08 transmitDataLengthMax, u08* transmitData))
{
	i2cSlaveTransmit = i2cSlaveTx_func;
 16a:	90 93 49 01 	sts	0x0149, r25
 16e:	80 93 48 01 	sts	0x0148, r24
}
 172:	08 95       	ret

00000174 <i2cSendStart>:

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
 174:	ec eb       	ldi	r30, 0xBC	; 188
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	8f 70       	andi	r24, 0x0F	; 15
 17c:	80 6a       	ori	r24, 0xA0	; 160
 17e:	80 83       	st	Z, r24
}
 180:	08 95       	ret

00000182 <i2cSendStop>:

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
 182:	ec eb       	ldi	r30, 0xBC	; 188
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	8f 70       	andi	r24, 0x0F	; 15
 18a:	80 6d       	ori	r24, 0xD0	; 208
 18c:	80 83       	st	Z, r24
}
 18e:	08 95       	ret

00000190 <i2cWaitForComplete>:

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
 190:	80 91 bc 00 	lds	r24, 0x00BC
 194:	87 ff       	sbrs	r24, 7
 196:	fc cf       	rjmp	.-8      	; 0x190 <i2cWaitForComplete>
}
 198:	08 95       	ret

0000019a <i2cSendByte>:

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
 19a:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 19e:	ec eb       	ldi	r30, 0xBC	; 188
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	8f 70       	andi	r24, 0x0F	; 15
 1a6:	80 68       	ori	r24, 0x80	; 128
 1a8:	80 83       	st	Z, r24
}
 1aa:	08 95       	ret

000001ac <i2cReceiveByte>:

inline void i2cReceiveByte(u08 ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
 1ac:	88 23       	and	r24, r24
 1ae:	29 f0       	breq	.+10     	; 0x1ba <i2cReceiveByte+0xe>
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 1b0:	80 91 bc 00 	lds	r24, 0x00BC
 1b4:	8f 70       	andi	r24, 0x0F	; 15
 1b6:	80 6c       	ori	r24, 0xC0	; 192
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <i2cReceiveByte+0x16>
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 1ba:	80 91 bc 00 	lds	r24, 0x00BC
 1be:	8f 70       	andi	r24, 0x0F	; 15
 1c0:	80 68       	ori	r24, 0x80	; 128
 1c2:	80 93 bc 00 	sts	0x00BC, r24
 1c6:	08 95       	ret

000001c8 <i2cGetReceivedByte>:
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
 1c8:	80 91 bb 00 	lds	r24, 0x00BB
}
 1cc:	08 95       	ret

000001ce <i2cGetStatus>:

inline u08 i2cGetStatus(void)
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
 1ce:	80 91 b9 00 	lds	r24, 0x00B9
}
 1d2:	08 95       	ret

000001d4 <i2cMasterSend>:

void i2cMasterSend(u08 deviceAddr, u08 length, u08* data)
{
	u08 i;
	// wait for interface to be ready
	while(I2cState);
 1d4:	90 91 00 01 	lds	r25, 0x0100
 1d8:	99 23       	and	r25, r25
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <i2cMasterSend>
	// set state
	I2cState = I2C_MASTER_TX;
 1dc:	92 e0       	ldi	r25, 0x02	; 2
 1de:	90 93 00 01 	sts	0x0100, r25
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
 1e2:	8e 7f       	andi	r24, 0xFE	; 254
 1e4:	80 93 01 01 	sts	0x0101, r24
 1e8:	84 2f       	mov	r24, r20
 1ea:	95 2f       	mov	r25, r21
 1ec:	dc 01       	movw	r26, r24
 1ee:	e4 e0       	ldi	r30, 0x04	; 4
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
}

void i2cMasterSend(u08 deviceAddr, u08 length, u08* data)
 1f2:	86 2f       	mov	r24, r22
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	8e 0f       	add	r24, r30
 1f8:	9f 1f       	adc	r25, r31
	while(I2cState);
	// set state
	I2cState = I2C_MASTER_TX;
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
	for(i=0; i<length; i++)
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <i2cMasterSend+0x2c>
		I2cSendData[i] = *data++;
 1fc:	2d 91       	ld	r18, X+
 1fe:	21 93       	st	Z+, r18
	while(I2cState);
	// set state
	I2cState = I2C_MASTER_TX;
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
	for(i=0; i<length; i++)
 200:	e8 17       	cp	r30, r24
 202:	f9 07       	cpc	r31, r25
 204:	d9 f7       	brne	.-10     	; 0x1fc <i2cMasterSend+0x28>
		I2cSendData[i] = *data++;
	I2cSendDataIndex = 0;
 206:	10 92 02 01 	sts	0x0102, r1
	I2cSendDataLength = length;
 20a:	60 93 03 01 	sts	0x0103, r22
	// send start condition
	i2cSendStart();
 20e:	0e 94 ba 00 	call	0x174	; 0x174 <i2cSendStart>
}
 212:	08 95       	ret

00000214 <i2cMasterReceive>:

void i2cMasterReceive(u08 deviceAddr, u08 length, u08* data)
{
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	df 93       	push	r29
 21a:	cf 93       	push	r28
 21c:	0f 92       	push	r0
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	8a 01       	movw	r16, r20
	u08 i;
	// wait for interface to be ready
	while(I2cState);
 224:	90 91 00 01 	lds	r25, 0x0100
 228:	99 23       	and	r25, r25
 22a:	e1 f7       	brne	.-8      	; 0x224 <i2cMasterReceive+0x10>
	// set state
	I2cState = I2C_MASTER_RX;
 22c:	93 e0       	ldi	r25, 0x03	; 3
 22e:	90 93 00 01 	sts	0x0100, r25
	// save data
	I2cDeviceAddrRW = (deviceAddr|0x01);	// RW set: read operation
 232:	81 60       	ori	r24, 0x01	; 1
 234:	80 93 01 01 	sts	0x0101, r24
	I2cReceiveDataIndex = 0;
 238:	10 92 24 01 	sts	0x0124, r1
	I2cReceiveDataLength = length;
 23c:	60 93 45 01 	sts	0x0145, r22
	// send start condition
	i2cSendStart();
 240:	69 83       	std	Y+1, r22	; 0x01
 242:	0e 94 ba 00 	call	0x174	; 0x174 <i2cSendStart>
 246:	69 81       	ldd	r22, Y+1	; 0x01
	// wait for data
	while(I2cState);
 248:	80 91 00 01 	lds	r24, 0x0100
 24c:	88 23       	and	r24, r24
 24e:	e1 f7       	brne	.-8      	; 0x248 <i2cMasterReceive+0x34>
 250:	e5 e2       	ldi	r30, 0x25	; 37
 252:	f1 e0       	ldi	r31, 0x01	; 1
	I2cSendDataLength = length;
	// send start condition
	i2cSendStart();
}

void i2cMasterReceive(u08 deviceAddr, u08 length, u08* data)
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	6e 0f       	add	r22, r30
 258:	7f 1f       	adc	r23, r31
 25a:	04 c0       	rjmp	.+8      	; 0x264 <i2cMasterReceive+0x50>
	i2cSendStart();
	// wait for data
	while(I2cState);
	// return data
	for(i=0; i<length; i++)
		*data++ = I2cReceiveData[i];
 25c:	81 91       	ld	r24, Z+
 25e:	d8 01       	movw	r26, r16
 260:	8d 93       	st	X+, r24
 262:	8d 01       	movw	r16, r26
	// send start condition
	i2cSendStart();
	// wait for data
	while(I2cState);
	// return data
	for(i=0; i<length; i++)
 264:	e6 17       	cp	r30, r22
 266:	f7 07       	cpc	r31, r23
 268:	c9 f7       	brne	.-14     	; 0x25c <i2cMasterReceive+0x48>
		*data++ = I2cReceiveData[i];
}
 26a:	0f 90       	pop	r0
 26c:	cf 91       	pop	r28
 26e:	df 91       	pop	r29
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	08 95       	ret

00000276 <i2cMasterSendNI>:

u08 i2cMasterSendNI(u08 deviceAddr, u08 length, u08* data)
{
 276:	ef 92       	push	r14
 278:	ff 92       	push	r15
 27a:	1f 93       	push	r17
 27c:	df 93       	push	r29
 27e:	cf 93       	push	r28
 280:	0f 92       	push	r0
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	16 2f       	mov	r17, r22
 288:	7a 01       	movw	r14, r20
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
 28a:	90 91 bc 00 	lds	r25, 0x00BC
 28e:	9e 7f       	andi	r25, 0xFE	; 254
 290:	90 93 bc 00 	sts	0x00BC, r25

	// send start condition
	i2cSendStart();
 294:	89 83       	std	Y+1, r24	; 0x01
 296:	0e 94 ba 00 	call	0x174	; 0x174 <i2cSendStart>
	i2cWaitForComplete();
 29a:	0e 94 c8 00 	call	0x190	; 0x190 <i2cWaitForComplete>

	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	8e 7f       	andi	r24, 0xFE	; 254
 2a2:	0e 94 cd 00 	call	0x19a	; 0x19a <i2cSendByte>
	i2cWaitForComplete();
 2a6:	0e 94 c8 00 	call	0x190	; 0x190 <i2cWaitForComplete>

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
 2aa:	80 91 b9 00 	lds	r24, 0x00B9
 2ae:	88 31       	cpi	r24, 0x18	; 24
 2b0:	69 f4       	brne	.+26     	; 0x2cc <i2cMasterSendNI+0x56>
 2b2:	08 c0       	rjmp	.+16     	; 0x2c4 <i2cMasterSendNI+0x4e>
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
 2b4:	f7 01       	movw	r30, r14
 2b6:	81 91       	ld	r24, Z+
 2b8:	7f 01       	movw	r14, r30
 2ba:	0e 94 cd 00 	call	0x19a	; 0x19a <i2cSendByte>
			i2cWaitForComplete();
 2be:	0e 94 c8 00 	call	0x190	; 0x190 <i2cWaitForComplete>
			length--;
 2c2:	11 50       	subi	r17, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
 2c4:	11 23       	and	r17, r17
 2c6:	b1 f7       	brne	.-20     	; 0x2b4 <i2cMasterSendNI+0x3e>
		*data++ = I2cReceiveData[i];
}

u08 i2cMasterSendNI(u08 deviceAddr, u08 length, u08* data)
{
	u08 retval = I2C_OK;
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	01 c0       	rjmp	.+2      	; 0x2ce <i2cMasterSendNI+0x58>
	else
	{
		// device did not ACK it's address,
		// data will not be transferred
		// return error
		retval = I2C_ERROR_NODEV;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
	}

	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();
 2ce:	89 83       	std	Y+1, r24	; 0x01
 2d0:	0e 94 c1 00 	call	0x182	; 0x182 <i2cSendStop>
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
	while( !(inb(TWCR) & BV(TWSTO)) );
 2d6:	90 91 bc 00 	lds	r25, 0x00BC
 2da:	94 ff       	sbrs	r25, 4
 2dc:	fc cf       	rjmp	.-8      	; 0x2d6 <i2cMasterSendNI+0x60>

	// enable TWI interrupt
	sbi(TWCR, TWIE);
 2de:	90 91 bc 00 	lds	r25, 0x00BC
 2e2:	91 60       	ori	r25, 0x01	; 1
 2e4:	90 93 bc 00 	sts	0x00BC, r25

	return retval;
}
 2e8:	0f 90       	pop	r0
 2ea:	cf 91       	pop	r28
 2ec:	df 91       	pop	r29
 2ee:	1f 91       	pop	r17
 2f0:	ff 90       	pop	r15
 2f2:	ef 90       	pop	r14
 2f4:	08 95       	ret

000002f6 <i2cMasterReceiveNI>:

u08 i2cMasterReceiveNI(u08 deviceAddr, u08 length, u08 *data)
{
 2f6:	ef 92       	push	r14
 2f8:	ff 92       	push	r15
 2fa:	1f 93       	push	r17
 2fc:	df 93       	push	r29
 2fe:	cf 93       	push	r28
 300:	0f 92       	push	r0
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	16 2f       	mov	r17, r22
 308:	7a 01       	movw	r14, r20
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
 30a:	90 91 bc 00 	lds	r25, 0x00BC
 30e:	9e 7f       	andi	r25, 0xFE	; 254
 310:	90 93 bc 00 	sts	0x00BC, r25

	// send start condition
	i2cSendStart();
 314:	89 83       	std	Y+1, r24	; 0x01
 316:	0e 94 ba 00 	call	0x174	; 0x174 <i2cSendStart>
	i2cWaitForComplete();
 31a:	0e 94 c8 00 	call	0x190	; 0x190 <i2cWaitForComplete>

	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
 31e:	89 81       	ldd	r24, Y+1	; 0x01
 320:	81 60       	ori	r24, 0x01	; 1
 322:	0e 94 cd 00 	call	0x19a	; 0x19a <i2cSendByte>
	i2cWaitForComplete();
 326:	0e 94 c8 00 	call	0x190	; 0x190 <i2cWaitForComplete>

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
 32a:	80 91 b9 00 	lds	r24, 0x00B9
 32e:	80 34       	cpi	r24, 0x40	; 64
 330:	c9 f4       	brne	.+50     	; 0x364 <i2cMasterReceiveNI+0x6e>
 332:	0b c0       	rjmp	.+22     	; 0x34a <i2cMasterReceiveNI+0x54>
	{
		// accept receive data and ack it
		while(length > 1)
		{
			i2cReceiveByte(TRUE);
 334:	8f ef       	ldi	r24, 0xFF	; 255
 336:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2cReceiveByte>
			i2cWaitForComplete();
 33a:	0e 94 c8 00 	call	0x190	; 0x190 <i2cWaitForComplete>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
 33e:	80 91 bb 00 	lds	r24, 0x00BB
		// accept receive data and ack it
		while(length > 1)
		{
			i2cReceiveByte(TRUE);
			i2cWaitForComplete();
			*data++ = i2cGetReceivedByte();
 342:	f7 01       	movw	r30, r14
 344:	81 93       	st	Z+, r24
 346:	7f 01       	movw	r14, r30
			// decrement length
			length--;
 348:	11 50       	subi	r17, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
	{
		// accept receive data and ack it
		while(length > 1)
 34a:	12 30       	cpi	r17, 0x02	; 2
 34c:	98 f7       	brcc	.-26     	; 0x334 <i2cMasterReceiveNI+0x3e>
			// decrement length
			length--;
		}

		// accept receive data and nack it (last-byte signal)
		i2cReceiveByte(FALSE);
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2cReceiveByte>
		i2cWaitForComplete();
 354:	0e 94 c8 00 	call	0x190	; 0x190 <i2cWaitForComplete>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
 358:	80 91 bb 00 	lds	r24, 0x00BB
		}

		// accept receive data and nack it (last-byte signal)
		i2cReceiveByte(FALSE);
		i2cWaitForComplete();
		*data++ = i2cGetReceivedByte();
 35c:	f7 01       	movw	r30, r14
 35e:	80 83       	st	Z, r24
	return retval;
}

u08 i2cMasterReceiveNI(u08 deviceAddr, u08 length, u08 *data)
{
	u08 retval = I2C_OK;
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	01 c0       	rjmp	.+2      	; 0x366 <i2cMasterReceiveNI+0x70>
	else
	{
		// device did not ACK it's address,
		// data will not be transferred
		// return error
		retval = I2C_ERROR_NODEV;
 364:	81 e0       	ldi	r24, 0x01	; 1
	}

	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();
 366:	89 83       	std	Y+1, r24	; 0x01
 368:	0e 94 c1 00 	call	0x182	; 0x182 <i2cSendStop>

	// enable TWI interrupt
	sbi(TWCR, TWIE);
 36c:	90 91 bc 00 	lds	r25, 0x00BC
 370:	91 60       	ori	r25, 0x01	; 1
 372:	90 93 bc 00 	sts	0x00BC, r25

	return retval;
}
 376:	89 81       	ldd	r24, Y+1	; 0x01
 378:	0f 90       	pop	r0
 37a:	cf 91       	pop	r28
 37c:	df 91       	pop	r29
 37e:	1f 91       	pop	r17
 380:	ff 90       	pop	r15
 382:	ef 90       	pop	r14
 384:	08 95       	ret

00000386 <SIG_2WIRE_SERIAL>:
}
*/

//! I2C (TWI) interrupt service routine
SIGNAL(SIG_2WIRE_SERIAL)
{
 386:	1f 92       	push	r1
 388:	0f 92       	push	r0
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	0f 92       	push	r0
 38e:	11 24       	eor	r1, r1
 390:	2f 93       	push	r18
 392:	3f 93       	push	r19
 394:	4f 93       	push	r20
 396:	5f 93       	push	r21
 398:	6f 93       	push	r22
 39a:	7f 93       	push	r23
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
 3a0:	af 93       	push	r26
 3a2:	bf 93       	push	r27
 3a4:	ef 93       	push	r30
 3a6:	ff 93       	push	r31
	// read status bits
	u08 status = inb(TWSR) & TWSR_STATUS_MASK;
 3a8:	80 91 b9 00 	lds	r24, 0x00B9
 3ac:	88 7f       	andi	r24, 0xF8	; 248

	switch(status)
 3ae:	80 36       	cpi	r24, 0x60	; 96
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <SIG_2WIRE_SERIAL+0x2e>
 3b2:	a0 c0       	rjmp	.+320    	; 0x4f4 <SIG_2WIRE_SERIAL+0x16e>
 3b4:	81 36       	cpi	r24, 0x61	; 97
 3b6:	70 f5       	brcc	.+92     	; 0x414 <SIG_2WIRE_SERIAL+0x8e>
 3b8:	88 32       	cpi	r24, 0x28	; 40
 3ba:	09 f4       	brne	.+2      	; 0x3be <SIG_2WIRE_SERIAL+0x38>
 3bc:	5f c0       	rjmp	.+190    	; 0x47c <SIG_2WIRE_SERIAL+0xf6>
 3be:	89 32       	cpi	r24, 0x29	; 41
 3c0:	98 f4       	brcc	.+38     	; 0x3e8 <SIG_2WIRE_SERIAL+0x62>
 3c2:	80 31       	cpi	r24, 0x10	; 16
 3c4:	09 f4       	brne	.+2      	; 0x3c8 <SIG_2WIRE_SERIAL+0x42>
 3c6:	57 c0       	rjmp	.+174    	; 0x476 <SIG_2WIRE_SERIAL+0xf0>
 3c8:	81 31       	cpi	r24, 0x11	; 17
 3ca:	38 f4       	brcc	.+14     	; 0x3da <SIG_2WIRE_SERIAL+0x54>
 3cc:	88 23       	and	r24, r24
 3ce:	09 f4       	brne	.+2      	; 0x3d2 <SIG_2WIRE_SERIAL+0x4c>
 3d0:	ef c0       	rjmp	.+478    	; 0x5b0 <__stack+0xb1>
 3d2:	88 30       	cpi	r24, 0x08	; 8
 3d4:	09 f0       	breq	.+2      	; 0x3d8 <SIG_2WIRE_SERIAL+0x52>
 3d6:	f4 c0       	rjmp	.+488    	; 0x5c0 <__stack+0xc1>
 3d8:	4e c0       	rjmp	.+156    	; 0x476 <SIG_2WIRE_SERIAL+0xf0>
 3da:	88 31       	cpi	r24, 0x18	; 24
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <SIG_2WIRE_SERIAL+0x5a>
 3de:	4e c0       	rjmp	.+156    	; 0x47c <SIG_2WIRE_SERIAL+0xf6>
 3e0:	80 32       	cpi	r24, 0x20	; 32
 3e2:	09 f0       	breq	.+2      	; 0x3e6 <SIG_2WIRE_SERIAL+0x60>
 3e4:	ed c0       	rjmp	.+474    	; 0x5c0 <__stack+0xc1>
 3e6:	67 c0       	rjmp	.+206    	; 0x4b6 <SIG_2WIRE_SERIAL+0x130>
 3e8:	80 34       	cpi	r24, 0x40	; 64
 3ea:	09 f4       	brne	.+2      	; 0x3ee <SIG_2WIRE_SERIAL+0x68>
 3ec:	78 c0       	rjmp	.+240    	; 0x4de <SIG_2WIRE_SERIAL+0x158>
 3ee:	81 34       	cpi	r24, 0x41	; 65
 3f0:	38 f4       	brcc	.+14     	; 0x400 <SIG_2WIRE_SERIAL+0x7a>
 3f2:	80 33       	cpi	r24, 0x30	; 48
 3f4:	09 f4       	brne	.+2      	; 0x3f8 <SIG_2WIRE_SERIAL+0x72>
 3f6:	5f c0       	rjmp	.+190    	; 0x4b6 <SIG_2WIRE_SERIAL+0x130>
 3f8:	88 33       	cpi	r24, 0x38	; 56
 3fa:	09 f0       	breq	.+2      	; 0x3fe <SIG_2WIRE_SERIAL+0x78>
 3fc:	e1 c0       	rjmp	.+450    	; 0x5c0 <__stack+0xc1>
 3fe:	5e c0       	rjmp	.+188    	; 0x4bc <SIG_2WIRE_SERIAL+0x136>
 400:	80 35       	cpi	r24, 0x50	; 80
 402:	09 f4       	brne	.+2      	; 0x406 <SIG_2WIRE_SERIAL+0x80>
 404:	60 c0       	rjmp	.+192    	; 0x4c6 <SIG_2WIRE_SERIAL+0x140>
 406:	88 35       	cpi	r24, 0x58	; 88
 408:	09 f4       	brne	.+2      	; 0x40c <SIG_2WIRE_SERIAL+0x86>
 40a:	49 c0       	rjmp	.+146    	; 0x49e <SIG_2WIRE_SERIAL+0x118>
 40c:	88 34       	cpi	r24, 0x48	; 72
 40e:	09 f0       	breq	.+2      	; 0x412 <SIG_2WIRE_SERIAL+0x8c>
 410:	d7 c0       	rjmp	.+430    	; 0x5c0 <__stack+0xc1>
 412:	51 c0       	rjmp	.+162    	; 0x4b6 <SIG_2WIRE_SERIAL+0x130>
 414:	88 39       	cpi	r24, 0x98	; 152
 416:	09 f4       	brne	.+2      	; 0x41a <SIG_2WIRE_SERIAL+0x94>
 418:	83 c0       	rjmp	.+262    	; 0x520 <__stack+0x21>
 41a:	89 39       	cpi	r24, 0x99	; 153
 41c:	b0 f4       	brcc	.+44     	; 0x44a <SIG_2WIRE_SERIAL+0xc4>
 41e:	88 37       	cpi	r24, 0x78	; 120
 420:	09 f4       	brne	.+2      	; 0x424 <SIG_2WIRE_SERIAL+0x9e>
 422:	68 c0       	rjmp	.+208    	; 0x4f4 <SIG_2WIRE_SERIAL+0x16e>
 424:	89 37       	cpi	r24, 0x79	; 121
 426:	38 f4       	brcc	.+14     	; 0x436 <SIG_2WIRE_SERIAL+0xb0>
 428:	88 36       	cpi	r24, 0x68	; 104
 42a:	09 f4       	brne	.+2      	; 0x42e <SIG_2WIRE_SERIAL+0xa8>
 42c:	63 c0       	rjmp	.+198    	; 0x4f4 <SIG_2WIRE_SERIAL+0x16e>
 42e:	80 37       	cpi	r24, 0x70	; 112
 430:	09 f0       	breq	.+2      	; 0x434 <SIG_2WIRE_SERIAL+0xae>
 432:	c6 c0       	rjmp	.+396    	; 0x5c0 <__stack+0xc1>
 434:	5f c0       	rjmp	.+190    	; 0x4f4 <SIG_2WIRE_SERIAL+0x16e>
 436:	88 38       	cpi	r24, 0x88	; 136
 438:	09 f4       	brne	.+2      	; 0x43c <SIG_2WIRE_SERIAL+0xb6>
 43a:	72 c0       	rjmp	.+228    	; 0x520 <__stack+0x21>
 43c:	80 39       	cpi	r24, 0x90	; 144
 43e:	09 f4       	brne	.+2      	; 0x442 <SIG_2WIRE_SERIAL+0xbc>
 440:	5f c0       	rjmp	.+190    	; 0x500 <__stack+0x1>
 442:	80 38       	cpi	r24, 0x80	; 128
 444:	09 f0       	breq	.+2      	; 0x448 <SIG_2WIRE_SERIAL+0xc2>
 446:	bc c0       	rjmp	.+376    	; 0x5c0 <__stack+0xc1>
 448:	5b c0       	rjmp	.+182    	; 0x500 <__stack+0x1>
 44a:	80 3b       	cpi	r24, 0xB0	; 176
 44c:	09 f4       	brne	.+2      	; 0x450 <SIG_2WIRE_SERIAL+0xca>
 44e:	7e c0       	rjmp	.+252    	; 0x54c <__stack+0x4d>
 450:	81 3b       	cpi	r24, 0xB1	; 177
 452:	38 f4       	brcc	.+14     	; 0x462 <SIG_2WIRE_SERIAL+0xdc>
 454:	80 3a       	cpi	r24, 0xA0	; 160
 456:	09 f4       	brne	.+2      	; 0x45a <SIG_2WIRE_SERIAL+0xd4>
 458:	67 c0       	rjmp	.+206    	; 0x528 <__stack+0x29>
 45a:	88 3a       	cpi	r24, 0xA8	; 168
 45c:	09 f0       	breq	.+2      	; 0x460 <SIG_2WIRE_SERIAL+0xda>
 45e:	b0 c0       	rjmp	.+352    	; 0x5c0 <__stack+0xc1>
 460:	75 c0       	rjmp	.+234    	; 0x54c <__stack+0x4d>
 462:	80 3c       	cpi	r24, 0xC0	; 192
 464:	09 f4       	brne	.+2      	; 0x468 <SIG_2WIRE_SERIAL+0xe2>
 466:	9f c0       	rjmp	.+318    	; 0x5a6 <__stack+0xa7>
 468:	88 3c       	cpi	r24, 0xC8	; 200
 46a:	09 f4       	brne	.+2      	; 0x46e <SIG_2WIRE_SERIAL+0xe8>
 46c:	9c c0       	rjmp	.+312    	; 0x5a6 <__stack+0xa7>
 46e:	88 3b       	cpi	r24, 0xB8	; 184
 470:	09 f0       	breq	.+2      	; 0x474 <SIG_2WIRE_SERIAL+0xee>
 472:	a6 c0       	rjmp	.+332    	; 0x5c0 <__stack+0xc1>
 474:	7c c0       	rjmp	.+248    	; 0x56e <__stack+0x6f>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: M->START\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// send device address
		i2cSendByte(I2cDeviceAddrRW);
 476:	80 91 01 01 	lds	r24, 0x0101
 47a:	0e c0       	rjmp	.+28     	; 0x498 <SIG_2WIRE_SERIAL+0x112>
		#ifdef I2C_DEBUG
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MT->SLA_ACK or DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		if(I2cSendDataIndex < I2cSendDataLength)
 47c:	90 91 02 01 	lds	r25, 0x0102
 480:	80 91 03 01 	lds	r24, 0x0103
 484:	98 17       	cp	r25, r24
 486:	b8 f4       	brcc	.+46     	; 0x4b6 <SIG_2WIRE_SERIAL+0x130>
		{
			// send data
			i2cSendByte( I2cSendData[I2cSendDataIndex++] );
 488:	e9 2f       	mov	r30, r25
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	ec 5f       	subi	r30, 0xFC	; 252
 48e:	fe 4f       	sbci	r31, 0xFE	; 254
 490:	80 81       	ld	r24, Z
 492:	9f 5f       	subi	r25, 0xFF	; 255
 494:	90 93 02 01 	sts	0x0102, r25
 498:	0e 94 cd 00 	call	0x19a	; 0x19a <i2cSendByte>
 49c:	91 c0       	rjmp	.+290    	; 0x5c0 <__stack+0xc1>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->DATA_NACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// store final received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
 49e:	80 91 24 01 	lds	r24, 0x0124
 4a2:	90 91 bb 00 	lds	r25, 0x00BB
 4a6:	e8 2f       	mov	r30, r24
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	eb 5d       	subi	r30, 0xDB	; 219
 4ac:	fe 4f       	sbci	r31, 0xFE	; 254
 4ae:	90 83       	st	Z, r25
 4b0:	8f 5f       	subi	r24, 0xFF	; 255
 4b2:	80 93 24 01 	sts	0x0124, r24
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MTR->SLA_NACK or MT->DATA_NACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// transmit stop condition, enable SLA ACK
		i2cSendStop();
 4b6:	0e 94 c1 00 	call	0x182	; 0x182 <i2cSendStop>
 4ba:	80 c0       	rjmp	.+256    	; 0x5bc <__stack+0xbd>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MT->ARB_LOST\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// release bus
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 4bc:	80 91 bc 00 	lds	r24, 0x00BC
 4c0:	8f 70       	andi	r24, 0x0F	; 15
 4c2:	80 68       	ori	r24, 0x80	; 128
 4c4:	79 c0       	rjmp	.+242    	; 0x5b8 <__stack+0xb9>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// store received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
 4c6:	80 91 24 01 	lds	r24, 0x0124
 4ca:	90 91 bb 00 	lds	r25, 0x00BB
 4ce:	e8 2f       	mov	r30, r24
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	eb 5d       	subi	r30, 0xDB	; 219
 4d4:	fe 4f       	sbci	r31, 0xFE	; 254
 4d6:	90 83       	st	Z, r25
 4d8:	8f 5f       	subi	r24, 0xFF	; 255
 4da:	80 93 24 01 	sts	0x0124, r24
		#ifdef I2C_DEBUG
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		if(I2cReceiveDataIndex < (I2cReceiveDataLength-1))
 4de:	20 91 24 01 	lds	r18, 0x0124
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	80 91 45 01 	lds	r24, 0x0145
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	28 17       	cp	r18, r24
 4ee:	39 07       	cpc	r19, r25
 4f0:	bc f4       	brge	.+46     	; 0x520 <__stack+0x21>
 4f2:	14 c0       	rjmp	.+40     	; 0x51c <__stack+0x1d>
		rprintf("I2C: SR->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// we are being addressed as slave for writing (data will be received from master)
		// set state
		I2cState = I2C_SLAVE_RX;
 4f4:	85 e0       	ldi	r24, 0x05	; 5
 4f6:	80 93 00 01 	sts	0x0100, r24
		// prepare buffer
		I2cReceiveDataIndex = 0;
 4fa:	10 92 24 01 	sts	0x0124, r1
 4fe:	47 c0       	rjmp	.+142    	; 0x58e <__stack+0x8f>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// get previously received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
 500:	80 91 24 01 	lds	r24, 0x0124
 504:	90 91 bb 00 	lds	r25, 0x00BB
 508:	e8 2f       	mov	r30, r24
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	eb 5d       	subi	r30, 0xDB	; 219
 50e:	fe 4f       	sbci	r31, 0xFE	; 254
 510:	90 83       	st	Z, r25
 512:	8f 5f       	subi	r24, 0xFF	; 255
 514:	80 93 24 01 	sts	0x0124, r24
		// check receive buffer status
		if(I2cReceiveDataIndex < I2C_RECEIVE_DATA_BUFFER_SIZE)
 518:	80 32       	cpi	r24, 0x20	; 32
 51a:	10 f4       	brcc	.+4      	; 0x520 <__stack+0x21>
		{
			// receive data byte and return ACK
			i2cReceiveByte(TRUE);
 51c:	8f ef       	ldi	r24, 0xFF	; 255
 51e:	01 c0       	rjmp	.+2      	; 0x522 <__stack+0x23>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->DATA_NACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// receive data byte and return NACK
		i2cReceiveByte(FALSE);
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2cReceiveByte>
		//outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
		break;
 526:	4c c0       	rjmp	.+152    	; 0x5c0 <__stack+0xc1>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->SR_STOP\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// switch to SR mode with SLA ACK
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 528:	80 91 bc 00 	lds	r24, 0x00BC
 52c:	8f 70       	andi	r24, 0x0F	; 15
 52e:	80 6c       	ori	r24, 0xC0	; 192
 530:	80 93 bc 00 	sts	0x00BC, r24
		// i2c receive is complete, call i2cSlaveReceive
		if(i2cSlaveReceive) i2cSlaveReceive(I2cReceiveDataIndex, I2cReceiveData);
 534:	e0 91 46 01 	lds	r30, 0x0146
 538:	f0 91 47 01 	lds	r31, 0x0147
 53c:	30 97       	sbiw	r30, 0x00	; 0
 53e:	f1 f1       	breq	.+124    	; 0x5bc <__stack+0xbd>
 540:	80 91 24 01 	lds	r24, 0x0124
 544:	65 e2       	ldi	r22, 0x25	; 37
 546:	71 e0       	ldi	r23, 0x01	; 1
 548:	09 95       	icall
 54a:	38 c0       	rjmp	.+112    	; 0x5bc <__stack+0xbd>
		rprintf("I2C: ST->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// we are being addressed as slave for reading (data must be transmitted back to master)
		// set state
		I2cState = I2C_SLAVE_TX;
 54c:	84 e0       	ldi	r24, 0x04	; 4
 54e:	80 93 00 01 	sts	0x0100, r24
		// request data from application
		if(i2cSlaveTransmit) I2cSendDataLength = i2cSlaveTransmit(I2C_SEND_DATA_BUFFER_SIZE, I2cSendData);
 552:	e0 91 48 01 	lds	r30, 0x0148
 556:	f0 91 49 01 	lds	r31, 0x0149
 55a:	30 97       	sbiw	r30, 0x00	; 0
 55c:	31 f0       	breq	.+12     	; 0x56a <__stack+0x6b>
 55e:	80 e2       	ldi	r24, 0x20	; 32
 560:	64 e0       	ldi	r22, 0x04	; 4
 562:	71 e0       	ldi	r23, 0x01	; 1
 564:	09 95       	icall
 566:	80 93 03 01 	sts	0x0103, r24
		// reset data index
		I2cSendDataIndex = 0;
 56a:	10 92 02 01 	sts	0x0102, r1
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: ST->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// transmit data byte
		outb(TWDR, I2cSendData[I2cSendDataIndex++]);
 56e:	80 91 02 01 	lds	r24, 0x0102
 572:	e8 2f       	mov	r30, r24
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	ec 5f       	subi	r30, 0xFC	; 252
 578:	fe 4f       	sbci	r31, 0xFE	; 254
 57a:	90 81       	ld	r25, Z
 57c:	90 93 bb 00 	sts	0x00BB, r25
 580:	8f 5f       	subi	r24, 0xFF	; 255
 582:	80 93 02 01 	sts	0x0102, r24
		if(I2cSendDataIndex < I2cSendDataLength)
 586:	90 91 03 01 	lds	r25, 0x0103
 58a:	89 17       	cp	r24, r25
 58c:	28 f4       	brcc	.+10     	; 0x598 <__stack+0x99>
			// expect ACK to data byte
			outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 58e:	80 91 bc 00 	lds	r24, 0x00BC
 592:	8f 70       	andi	r24, 0x0F	; 15
 594:	80 6c       	ori	r24, 0xC0	; 192
 596:	04 c0       	rjmp	.+8      	; 0x5a0 <__stack+0xa1>
		else
			// expect NACK to data byte
			outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 598:	80 91 bc 00 	lds	r24, 0x00BC
 59c:	8f 70       	andi	r24, 0x0F	; 15
 59e:	80 68       	ori	r24, 0x80	; 128
 5a0:	80 93 bc 00 	sts	0x00BC, r24
 5a4:	0d c0       	rjmp	.+26     	; 0x5c0 <__stack+0xc1>
		rprintf("I2C: ST->DATA_NACK or LAST_DATA\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// all done
		// switch to open slave
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 5a6:	80 91 bc 00 	lds	r24, 0x00BC
 5aa:	8f 70       	andi	r24, 0x0F	; 15
 5ac:	80 6c       	ori	r24, 0xC0	; 192
 5ae:	04 c0       	rjmp	.+8      	; 0x5b8 <__stack+0xb9>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: BUS_ERROR\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// reset internal hardware and release bus
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTO)|BV(TWEA));
 5b0:	80 91 bc 00 	lds	r24, 0x00BC
 5b4:	8f 70       	andi	r24, 0x0F	; 15
 5b6:	80 6d       	ori	r24, 0xD0	; 208
 5b8:	80 93 bc 00 	sts	0x00BC, r24
		// set state
		I2cState = I2C_IDLE;
 5bc:	10 92 00 01 	sts	0x0100, r1
		break;
	}
}
 5c0:	ff 91       	pop	r31
 5c2:	ef 91       	pop	r30
 5c4:	bf 91       	pop	r27
 5c6:	af 91       	pop	r26
 5c8:	9f 91       	pop	r25
 5ca:	8f 91       	pop	r24
 5cc:	7f 91       	pop	r23
 5ce:	6f 91       	pop	r22
 5d0:	5f 91       	pop	r21
 5d2:	4f 91       	pop	r20
 5d4:	3f 91       	pop	r19
 5d6:	2f 91       	pop	r18
 5d8:	0f 90       	pop	r0
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	0f 90       	pop	r0
 5de:	1f 90       	pop	r1
 5e0:	18 95       	reti

000005e2 <i2cGetState>:

eI2cStateType i2cGetState(void)
{
	return I2cState;
 5e2:	80 91 00 01 	lds	r24, 0x0100
}
 5e6:	08 95       	ret

000005e8 <mcp23008_init>:
#define MCP23008_BASE_ADDRESS	0x40

u08 mcp23008_data[2];

void mcp23008_init(MCP23008 *obj, u08 address)
{
 5e8:	0f 93       	push	r16
 5ea:	1f 93       	push	r17
 5ec:	df 93       	push	r29
 5ee:	cf 93       	push	r28
 5f0:	0f 92       	push	r0
 5f2:	cd b7       	in	r28, 0x3d	; 61
 5f4:	de b7       	in	r29, 0x3e	; 62
 5f6:	8c 01       	movw	r16, r24
	i2cInit();
 5f8:	69 83       	std	Y+1, r22	; 0x01
 5fa:	0e 94 88 00 	call	0x110	; 0x110 <i2cInit>
	obj->address = MCP23008_BASE_ADDRESS + address;
 5fe:	69 81       	ldd	r22, Y+1	; 0x01
 600:	60 5c       	subi	r22, 0xC0	; 192
 602:	f8 01       	movw	r30, r16
 604:	60 83       	st	Z, r22
}
 606:	0f 90       	pop	r0
 608:	cf 91       	pop	r28
 60a:	df 91       	pop	r29
 60c:	1f 91       	pop	r17
 60e:	0f 91       	pop	r16
 610:	08 95       	ret

00000612 <mcp23008_write_register>:
	mcp23008_write_register(object,MCP23008_GPIO,object->data);
}

void mcp23008_write_register( MCP23008 *obj, u08 reg, u08 data)
{
	mcp23008_data[0] = reg;
 612:	60 93 4e 01 	sts	0x014E, r22
	mcp23008_data[1] = data;
 616:	40 93 4f 01 	sts	0x014F, r20
	i2cMasterSendNI(obj->address,2,&mcp23008_data);
 61a:	fc 01       	movw	r30, r24
 61c:	80 81       	ld	r24, Z
 61e:	62 e0       	ldi	r22, 0x02	; 2
 620:	4e e4       	ldi	r20, 0x4E	; 78
 622:	51 e0       	ldi	r21, 0x01	; 1
 624:	0e 94 3b 01 	call	0x276	; 0x276 <i2cMasterSendNI>
}
 628:	08 95       	ret

0000062a <mcp23008_write>:
	i2cInit();
	obj->address = MCP23008_BASE_ADDRESS + address;
}

void mcp23008_write(MCP23008 *object)
{
 62a:	fc 01       	movw	r30, r24
	mcp23008_write_register(object,MCP23008_GPIO,object->data);
 62c:	69 e0       	ldi	r22, 0x09	; 9
 62e:	41 81       	ldd	r20, Z+1	; 0x01
 630:	0e 94 09 03 	call	0x612	; 0x612 <mcp23008_write_register>
}
 634:	08 95       	ret

00000636 <mcp23008_read_register>:
	mcp23008_data[1] = data;
	i2cMasterSendNI(obj->address,2,&mcp23008_data);
}

u08 mcp23008_read_register( MCP23008 *obj, u08 reg)
{
 636:	0f 93       	push	r16
 638:	1f 93       	push	r17
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	ec 01       	movw	r28, r24
	mcp23008_data[0] = reg;
 640:	0e e4       	ldi	r16, 0x4E	; 78
 642:	11 e0       	ldi	r17, 0x01	; 1
 644:	60 93 4e 01 	sts	0x014E, r22
	i2cMasterSendNI(obj->address,1,&mcp23008_data);
 648:	88 81       	ld	r24, Y
 64a:	61 e0       	ldi	r22, 0x01	; 1
 64c:	a8 01       	movw	r20, r16
 64e:	0e 94 3b 01 	call	0x276	; 0x276 <i2cMasterSendNI>
	i2cMasterReceiveNI(obj->address,1,&mcp23008_data);
 652:	88 81       	ld	r24, Y
 654:	61 e0       	ldi	r22, 0x01	; 1
 656:	a8 01       	movw	r20, r16
 658:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2cMasterReceiveNI>
	return mcp23008_data[0];
 65c:	80 91 4e 01 	lds	r24, 0x014E
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	1f 91       	pop	r17
 666:	0f 91       	pop	r16
 668:	08 95       	ret

0000066a <__divmodsi4>:
 66a:	97 fb       	bst	r25, 7
 66c:	09 2e       	mov	r0, r25
 66e:	05 26       	eor	r0, r21
 670:	0e d0       	rcall	.+28     	; 0x68e <__divmodsi4_neg1>
 672:	57 fd       	sbrc	r21, 7
 674:	04 d0       	rcall	.+8      	; 0x67e <__divmodsi4_neg2>
 676:	14 d0       	rcall	.+40     	; 0x6a0 <__udivmodsi4>
 678:	0a d0       	rcall	.+20     	; 0x68e <__divmodsi4_neg1>
 67a:	00 1c       	adc	r0, r0
 67c:	38 f4       	brcc	.+14     	; 0x68c <__divmodsi4_exit>

0000067e <__divmodsi4_neg2>:
 67e:	50 95       	com	r21
 680:	40 95       	com	r20
 682:	30 95       	com	r19
 684:	21 95       	neg	r18
 686:	3f 4f       	sbci	r19, 0xFF	; 255
 688:	4f 4f       	sbci	r20, 0xFF	; 255
 68a:	5f 4f       	sbci	r21, 0xFF	; 255

0000068c <__divmodsi4_exit>:
 68c:	08 95       	ret

0000068e <__divmodsi4_neg1>:
 68e:	f6 f7       	brtc	.-4      	; 0x68c <__divmodsi4_exit>
 690:	90 95       	com	r25
 692:	80 95       	com	r24
 694:	70 95       	com	r23
 696:	61 95       	neg	r22
 698:	7f 4f       	sbci	r23, 0xFF	; 255
 69a:	8f 4f       	sbci	r24, 0xFF	; 255
 69c:	9f 4f       	sbci	r25, 0xFF	; 255
 69e:	08 95       	ret

000006a0 <__udivmodsi4>:
 6a0:	a1 e2       	ldi	r26, 0x21	; 33
 6a2:	1a 2e       	mov	r1, r26
 6a4:	aa 1b       	sub	r26, r26
 6a6:	bb 1b       	sub	r27, r27
 6a8:	fd 01       	movw	r30, r26
 6aa:	0d c0       	rjmp	.+26     	; 0x6c6 <__udivmodsi4_ep>

000006ac <__udivmodsi4_loop>:
 6ac:	aa 1f       	adc	r26, r26
 6ae:	bb 1f       	adc	r27, r27
 6b0:	ee 1f       	adc	r30, r30
 6b2:	ff 1f       	adc	r31, r31
 6b4:	a2 17       	cp	r26, r18
 6b6:	b3 07       	cpc	r27, r19
 6b8:	e4 07       	cpc	r30, r20
 6ba:	f5 07       	cpc	r31, r21
 6bc:	20 f0       	brcs	.+8      	; 0x6c6 <__udivmodsi4_ep>
 6be:	a2 1b       	sub	r26, r18
 6c0:	b3 0b       	sbc	r27, r19
 6c2:	e4 0b       	sbc	r30, r20
 6c4:	f5 0b       	sbc	r31, r21

000006c6 <__udivmodsi4_ep>:
 6c6:	66 1f       	adc	r22, r22
 6c8:	77 1f       	adc	r23, r23
 6ca:	88 1f       	adc	r24, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	1a 94       	dec	r1
 6d0:	69 f7       	brne	.-38     	; 0x6ac <__udivmodsi4_loop>
 6d2:	60 95       	com	r22
 6d4:	70 95       	com	r23
 6d6:	80 95       	com	r24
 6d8:	90 95       	com	r25
 6da:	9b 01       	movw	r18, r22
 6dc:	ac 01       	movw	r20, r24
 6de:	bd 01       	movw	r22, r26
 6e0:	cf 01       	movw	r24, r30
 6e2:	08 95       	ret

000006e4 <_exit>:
 6e4:	f8 94       	cli

000006e6 <__stop_program>:
 6e6:	ff cf       	rjmp	.-2      	; 0x6e6 <__stop_program>
